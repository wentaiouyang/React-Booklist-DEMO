{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","books","setBook","modal","setModal","editModal","setEditModal","name","price","newBookData","setData","id","editData","setEdit","useEffect","axios","get","then","res","data","toggleNewBookModal","toggleEditBookModal","booksList","map","book","key","Button","color","size","className","onClick","console","log","delete","Modal","isOpen","ModalHeader","ModalBody","FormGroup","Label","for","Input","type","value","newBookName","onChange","e","target","newBookPrice","ModalFooter","post","push","toggle","put","Table","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f97d0b56.chunk.js","sourcesContent":["import React, {useState,useEffect} from 'react';\nimport axios from 'axios';\nimport { Table, Button, Modal, ModalBody, ModalFooter, ModalHeader, FormGroup, Label, Input } from 'reactstrap'\n\nfunction App() {\n  const [books,setBook] = useState([]);\n  const [modal,setModal] = useState(false);\n  const [editModal,setEditModal] = useState(false);\n  const [newBookData,setData] = useState({\n      name:'',\n      price:'',\n  });\n  const [editData,setEdit] = useState({\n      id:'',\n      name:'',\n      price:'',\n  });\n\n  useEffect(()=>{\n    axios.get('http://localhost:3000/books').then((res)=>{\n      setBook(res.data);\n    })\n  });\n\n  let AddBook=()=>{\n    axios.post('http://localhost:3000/books', newBookData).then((res)=>{\n        books.push(res.data);\n        setBook(books);\n        setModal(false);\n        setData({\n            name:'',\n            price:'',\n        });\n        console.log(res.data);\n    })\n  };\n\n  let deleteBook = (id,name,price)=>{\n          setEdit({\n              id: id,\n              name: name,\n              price: price,\n          });\n        axios.delete('http://localhost:3000/books/'+ id).then((res)=>{\n            axios.get('http://localhost:3000/books').then((res)=>{\n                setBook(res.data);\n            })\n        })\n    };\n\n  let editBook=(id,name,price) => {\n      setEdit({\n          id: id,\n          name: name,\n          price: price,\n      });\n      toggleEditBookModal();\n      console.log(editData)\n  };\n\n  let updateBook = ()=>{\n      let {name,price}=editData;\n      axios.put('http://localhost:3000/books/'+editData.id, {name,price}).then((res)=>{\n          console.log(res.data)\n      });\n      setEditModal(!editModal);\n      setEdit({\n          id: '',\n          name: '',\n          price: '',\n      });\n  };\n\n  let toggleNewBookModal=()=>{\n      setModal(!modal);\n  };\n\n  let toggleEditBookModal=()=>{\n      setEditModal(!editModal);\n  };\n\n  let booksList = books.map((book)=>{\n      return(\n          <tr key={book.id}>\n            <td>{book.id}</td>\n            <td>{book.name}</td>\n            <td>{book.price}</td>\n            <td>\n              <Button color=\"success\" size=\"sm\" className=\"mr-2\" onClick={()=>{editBook(book.id,book.name,book.price)}}>Edit</Button>\n              <Button color=\"danger\" size=\"sm\" onClick={()=>{deleteBook(book.id,book.name,book.price)}}>Delete</Button>\n            </td>\n          </tr>\n      )\n  });\n\n  return(\n    <div className=\"App container\">\n        <Button className=\"my-3\" color=\"primary\" onClick={toggleNewBookModal} >Add Book</Button>\n        <Modal isOpen={modal}>\n            <ModalHeader>Add a new book</ModalHeader>\n            <ModalBody>\n                <FormGroup>\n                    <Label for=\"bookName\">Book Name</Label>\n                    <Input type=\"text\" value={newBookData.newBookName} onChange={(e)=>{\n                        newBookData.name = e.target.value;\n                        setData(newBookData);\n                    }}/>\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"bookPrice\">Book Price</Label>\n                    <Input type=\"text\" value={newBookData.newBookPrice} onChange={(e)=>{\n                        newBookData.price = e.target.value;\n                        setData(newBookData);\n                    }}/>\n                </FormGroup>\n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"primary\" onClick={AddBook}>Add</Button>{' '}\n                <Button color=\"secondary\" onClick={toggleNewBookModal}>Cancel</Button>\n            </ModalFooter>\n        </Modal>\n        <Modal isOpen={editModal}>\n            <ModalHeader toggle={toggleEditBookModal}>Edit the book</ModalHeader>\n            <ModalBody>\n                <FormGroup>\n                    <Label for=\"bookName\">Book Name</Label>\n                    <Input type=\"text\" value={newBookData.newBookName} onChange={(e)=>{\n                        editData.name = e.target.value;\n                        setData(newBookData);\n                    }}/>\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"bookPrice\">Book Price</Label>\n                    <Input type=\"text\" value={newBookData.newBookPrice} onChange={(e)=>{\n                        editData.price = e.target.value;\n                        setData(editData);\n                    }}/>\n                </FormGroup>\n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"primary\" onClick={updateBook}>Update</Button>{' '}\n                <Button color=\"secondary\" onClick={toggleEditBookModal}>Cancel</Button>\n            </ModalFooter>\n        </Modal>\n        <Table>\n        <thead>\n            <tr>\n                <th>id</th>\n                <th>Title</th>\n                <th>Price</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody>\n          {booksList}\n        </tbody>\n        </Table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}